{"numTotalTestSuites":11,"numPassedTestSuites":8,"numFailedTestSuites":3,"numPendingTestSuites":0,"numTotalTests":23,"numPassedTests":22,"numFailedTests":1,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1755390993962,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["CabinetService","createCabinet"],"fullName":"CabinetService createCabinet should create a cabinet successfully","status":"passed","title":"should create a cabinet successfully","duration":6.9918999671936035,"failureMessages":[],"location":{"line":154,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","createCabinet"],"fullName":"CabinetService createCabinet should reject invalid cabinet data","status":"passed","title":"should reject invalid cabinet data","duration":1.3203999996185303,"failureMessages":[],"location":{"line":164,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","createCabinet"],"fullName":"CabinetService createCabinet should handle repository errors","status":"failed","title":"should handle repository errors","duration":4.660099983215332,"failureMessages":["ReferenceError: error is not defined\n    at CabinetService.createCabinet (C:\\Users\\ganed\\WebstormProjects\\nova\\src\\lib\\services\\cabinet-service.ts:77:48)\n    at C:\\Users\\ganed\\WebstormProjects\\nova\\src\\test\\services\\cabinet-service.test.ts:179:22\n    at file:///C:/Users/ganed/WebstormProjects/nova/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"],"location":{"line":174,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","getCabinetById"],"fullName":"CabinetService getCabinetById should return cabinet when found","status":"passed","title":"should return cabinet when found","duration":1.3682000041007996,"failureMessages":[],"location":{"line":187,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","getCabinetById"],"fullName":"CabinetService getCabinetById should return error when cabinet not found","status":"passed","title":"should return error when cabinet not found","duration":1.0602999925613403,"failureMessages":[],"location":{"line":198,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","getCabinetBySlug"],"fullName":"CabinetService getCabinetBySlug should return cabinet when found","status":"passed","title":"should return cabinet when found","duration":1.103700041770935,"failureMessages":[],"location":{"line":207,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","getCabinetBySlug"],"fullName":"CabinetService getCabinetBySlug should return error when cabinet not found","status":"passed","title":"should return error when cabinet not found","duration":0.7759000062942505,"failureMessages":[],"location":{"line":217,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","getAllCabinets"],"fullName":"CabinetService getAllCabinets should return all cabinets","status":"passed","title":"should return all cabinets","duration":1.1277999877929688,"failureMessages":[],"location":{"line":242,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","getAllCabinets"],"fullName":"CabinetService getAllCabinets should filter cabinets by status","status":"passed","title":"should filter cabinets by status","duration":0.7462000250816345,"failureMessages":[],"location":{"line":250,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","getAllCabinets"],"fullName":"CabinetService getAllCabinets should search cabinets","status":"passed","title":"should search cabinets","duration":0.7063999772071838,"failureMessages":[],"location":{"line":257,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","getAllCabinets"],"fullName":"CabinetService getAllCabinets should limit results","status":"passed","title":"should limit results","duration":0.7980999946594238,"failureMessages":[],"location":{"line":265,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","updateCabinet"],"fullName":"CabinetService updateCabinet should update cabinet successfully","status":"passed","title":"should update cabinet successfully","duration":1.4180999994277954,"failureMessages":[],"location":{"line":281,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","updateCabinet"],"fullName":"CabinetService updateCabinet should reject invalid update data","status":"passed","title":"should reject invalid update data","duration":0.4880000352859497,"failureMessages":[],"location":{"line":294,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","updateCabinet"],"fullName":"CabinetService updateCabinet should return error for non-existent cabinet","status":"passed","title":"should return error for non-existent cabinet","duration":0.9249999523162842,"failureMessages":[],"location":{"line":305,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","deleteCabinet"],"fullName":"CabinetService deleteCabinet should delete cabinet successfully","status":"passed","title":"should delete cabinet successfully","duration":0.7026000022888184,"failureMessages":[],"location":{"line":321,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","deleteCabinet"],"fullName":"CabinetService deleteCabinet should return error for non-existent cabinet","status":"passed","title":"should return error for non-existent cabinet","duration":0.5006000399589539,"failureMessages":[],"location":{"line":332,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","setCabinetStatus"],"fullName":"CabinetService setCabinetStatus should update cabinet status","status":"passed","title":"should update cabinet status","duration":0.5483999848365784,"failureMessages":[],"location":{"line":348,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","Cabinet Configuration"],"fullName":"CabinetService Cabinet Configuration should set and get cabinet config","status":"passed","title":"should set and get cabinet config","duration":1.8986999988555908,"failureMessages":[],"location":{"line":364,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","Cabinet Configuration"],"fullName":"CabinetService Cabinet Configuration should return error for non-existent config","status":"passed","title":"should return error for non-existent config","duration":0.4583999514579773,"failureMessages":[],"location":{"line":375,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","Cabinet Configuration"],"fullName":"CabinetService Cabinet Configuration should delete cabinet config","status":"passed","title":"should delete cabinet config","duration":0.8801000118255615,"failureMessages":[],"location":{"line":382,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","Cabinet Configuration"],"fullName":"CabinetService Cabinet Configuration should get all cabinet configs","status":"passed","title":"should get all cabinet configs","duration":1.5614999532699585,"failureMessages":[],"location":{"line":393,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","Convenience methods"],"fullName":"CabinetService Convenience methods should get active cabinets only","status":"passed","title":"should get active cabinets only","duration":0.7908999919891357,"failureMessages":[],"location":{"line":424,"column":5},"meta":{}},{"ancestorTitles":["CabinetService","Convenience methods"],"fullName":"CabinetService Convenience methods should search cabinets with limit","status":"passed","title":"should search cabinets with limit","duration":0.4422000050544739,"failureMessages":[],"location":{"line":432,"column":5},"meta":{}}],"startTime":1755390998434,"endTime":1755390998467.4421,"status":"failed","message":"","name":"C:/Users/ganed/WebstormProjects/nova/src/test/services/cabinet-service.test.ts"}]}